{"pageProps":{"frontmatter":{"title":"How to use PrismJS in ReactJS","date":"January 14, 2023","description":"Today, we are going to see how to use PrismJS in a ReactJS application. It is a very popular syntax highlighting Javascript library. Used in various popular websites to display code.","tags":["web","react"],"cover_image":"./graphics/blog-cover/prismjs.webp"},"content":"\n## Introduction\n\nPrism is a lightweight, extensible syntax highlighter, built with modern web standards in mind. Itâ€™s used in millions of websites, including some of those you visit daily\n\n_For more info on PrismJS [Click Here](https://prismjs.com/)_\n\n## Install PrismJS using npm\n\nI assume that your React project is configured correctly. After your React\nproject is up and running. Install PrismJS on the terminal.\n\n```bash\nnpm i prismjs\n```\n\n## After we have installed prismjs we will import\n\n- Language Support\n- Themes\n- Plugins\n\n## Import Prism and Theme in your project\n\nHere we are importing `PrismJS` and the `Theme`.\n\n```javascript\nimport Prism from \"prismjs\"; // Prism\nimport \"prismjs/themes/prism-okaidia.min.css\"; // Import theme\n```\n\nThemes are stored in the `prismjs/themes/` directory. Here are all\nthe possible themes supported by PrismJS.\n\n- prism-coy.min.css\n- prism-dark.min.css\n- prism-funky.min.css\n- prism-okaidia.min.css\n- prism-solarizedlight.min.css\n- prism-tomorrow.min.css\n- prism-twilight.min.css\n\n## Add language support and Plugins\n\nIn order to enable syntax highlighting we need the language from the\n`'prismjs/componenent/'` directory. In this project we are going to highlight C++ code.\n\nWe are going to import plugins from the `prismjs/themes` directory.\n\nAnd we are going to use the `normalize-whitespace` plugin to\nremove all leading and trailing spaces in the code.\n\n```javascript\n// C is required for C++ highlighting to work\nrequire(\"prismjs/components/prism-c\");\n\n// Add language support for C++\nrequire(\"prismjs/components/prism-cpp\");\n\n// To remove extra white spaces\nrequire(\"prismjs/plugins/normalize-whitespace/prism-normalize-whitespace\");\n```\n\nTo see which plugins are supported in PrismJS [Click Here](https://prismjs.com/#plugins)\n\n## How to put code in HTML\n\nAfter we have imported all the required files. We are place your code inside the `pre > code` tags, like the example below. Here, `xxxx` is the name of the language\n\nTo see all the languages supported by PrismJS [Click Here](https://prismjs.com/#supported-languages)\n\n```html\n<pre>\n  <code className=\"language-xxxx\">\n    <!-- Your code here -->\n  </code>\n</pre>\n```\n\nBut, wait. It is not over yet, the syntax highlighting will not work yet now.\nWe have to call the `Prism.highlighAll()` function to highlight our code\nafter rendering the html.\n\n## Final Code Example\n\nNow the final code. Here we are going to call the `Prism.highlightAll()` function inside `useEffect()` hook. This will highlight our code after the\nComponent is rendered.\n\n```jsx\nimport Prism from \"prismjs\"; // Prism\nimport \"prismjs/themes/prism-okaidia.min.css\"; // Import theme\n\nrequire(\"prismjs/components/prism-c\");\nrequire(\"prismjs/components/prism-cpp\");\nrequire(\"prismjs/plugins/normalize-whitespace/prism-normalize-whitespace\");\n\nfunction App() {\n\n  useEffect(() => {\n    Prism.highlightAll();\n  });\n\n  return (\n    <pre>\n      <code className=\"language-cpp\">\n        // Your First C++ Program\n\n        #include <iostream>\n\n        int main() {\n            std::cout << \"Hello World!\";\n            return 0;\n        }\n\n\n      </code>\n    </pre>\n  );\n}\n```\n\nAnd now the rendered App component will have code highlighting enabled\n\n**Note: This process also works on `NextJS`**\n","slug":"how-to-use-prismjs-in-react-js"},"__N_SSG":true}